{"version":3,"sources":["components/Dashboard.js","utils.js","App.js","index.js"],"names":["Dashboard","price","data","className","options","tooltips","intersect","mode","responsive","maintainAspectRatio","formatData","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","map","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","reverse","App","useState","currencies","setcurrencies","pair","setpair","setprice","pastData","setpastData","ws","useRef","first","url","useEffect","current","WebSocket","pairs","a","fetch","then","res","json","filtered","filter","quote_currency","sort","b","base_currency","apiCall","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","dataArr","formattedData","fetchHistoricalData","onmessage","e","parse","product_id","name","value","onChange","unsubMsg","unsub","target","cur","idx","id","display_name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7b11110.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nfunction Dashboard({ price, data }) {\r\n  const opts = {\r\n    tooltips: {\r\n      intersect: false,\r\n      mode: \"index\"\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false\r\n  };\r\n  if (price === \"0.00\") {\r\n    return <h2>Select a currency pair :)</h2>;\r\n  }\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h2>{`$${price}`}</h2>\r\n\r\n      <div className=\"chart-container\">\r\n        <Line data={data} options={opts} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","export const formatData = (data) => {\r\n    let finalData = {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: \"Price\",\r\n          data: [],\r\n          backgroundColor: \"rgb(255, 99, 132, 0.8)\",\r\n          borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n          fill: false\r\n        }\r\n      ]\r\n    };\r\n  \r\n    let dates = data.map((val) => {\r\n      const ts = val[0];\r\n      let date = new Date(ts * 1000);\r\n      let day = date.getDate();\r\n      let month = date.getMonth() + 1;\r\n      let year = date.getFullYear();\r\n  \r\n      let final = `${month}-${day}-${year}`;\r\n      return final;\r\n    });\r\n  \r\n    let priceArr = data.map((val) => {\r\n      return val[4];\r\n    });\r\n  \r\n    priceArr.reverse();\r\n    dates.reverse();\r\n    finalData.labels = dates;\r\n    finalData.datasets[0].data = priceArr;\r\n\r\n    return finalData;\r\n  };\r\n  ","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport { formatData } from \"./utils\";\r\nimport \"./styles.css\";\r\n\r\nexport default function App() {\r\n  const [currencies, setcurrencies] = useState([]);\r\n  const [pair, setpair] = useState(\"\");\r\n  const [price, setprice] = useState(\"0.00\");\r\n  const [pastData, setpastData] = useState({});\r\n  const ws = useRef(null);\r\n\r\n  let first = useRef(false);\r\n  const url = \"https://api.pro.coinbase.com\";\r\n\r\n  useEffect(() => {\r\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\r\n\r\n    let pairs = [];\r\n\r\n    const apiCall = async () => {\r\n      await fetch(url + \"/products\")\r\n        .then((res) => res.json())\r\n        .then((data) => (pairs = data));\r\n      \r\n      let filtered = pairs.filter((pair) => {\r\n        if (pair.quote_currency === \"USD\") {\r\n          return pair;\r\n        }\r\n      });\r\n\r\n      filtered = filtered.sort((a, b) => {\r\n        if (a.base_currency < b.base_currency) {\r\n          return -1;\r\n        }\r\n        if (a.base_currency > b.base_currency) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      });\r\n\r\n      \r\n      setcurrencies(filtered);\r\n\r\n      first.current = true;\r\n    };\r\n\r\n    apiCall();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!first.current) {\r\n      \r\n      return;\r\n    }\r\n\r\n    \r\n    let msg = {\r\n      type: \"subscribe\",\r\n      product_ids: [pair],\r\n      channels: [\"ticker\"]\r\n    };\r\n    let jsonMsg = JSON.stringify(msg);\r\n    ws.current.send(jsonMsg);\r\n\r\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\r\n    const fetchHistoricalData = async () => {\r\n      let dataArr = [];\r\n      await fetch(historicalDataURL)\r\n        .then((res) => res.json())\r\n        .then((data) => (dataArr = data));\r\n      \r\n      let formattedData = formatData(dataArr);\r\n      setpastData(formattedData);\r\n    };\r\n\r\n    fetchHistoricalData();\r\n\r\n    ws.current.onmessage = (e) => {\r\n      let data = JSON.parse(e.data);\r\n      if (data.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      if (data.product_id === pair) {\r\n        setprice(data.price);\r\n      }\r\n    };\r\n  }, [pair]);\r\n\r\n  const handleSelect = (e) => {\r\n    let unsubMsg = {\r\n      type: \"unsubscribe\",\r\n      product_ids: [pair],\r\n      channels: [\"ticker\"]\r\n    };\r\n    let unsub = JSON.stringify(unsubMsg);\r\n\r\n    ws.current.send(unsub);\r\n\r\n    setpair(e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {\r\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\r\n          {currencies.map((cur, idx) => {\r\n            return (\r\n              <option key={idx} value={cur.id}>\r\n                {cur.display_name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      }\r\n      <Dashboard price={price} data={pastData} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}